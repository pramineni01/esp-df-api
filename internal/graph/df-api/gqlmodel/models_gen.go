// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package gqlmodel

import (
	"fmt"
	"io"
	"strconv"
)

type Dataset struct {
	DatasetID          int     `json:"dataset_id"`
	DatasourceID       int     `json:"datasource_id"`
	DatasetName        string  `json:"dataset_name"`
	DatasetDescription *string `json:"dataset_description"`
	DatasetVersion     string  `json:"dataset_version"`
}

func (Dataset) IsEntity() {}

type DeleteScenarioResponse struct {
	Success           bool   `json:"success"`
	Message           string `json:"message"`
	DeletedScenarioID *int   `json:"deletedScenarioId"`
}

type Forecast struct {
	ForecastID                     int      `json:"forecast_id"`
	Dataset                        *Dataset `json:"dataset"`
	LatestVersionDimensionMemberID *int     `json:"latest_version_dimension_member_id"`
}

func (Forecast) IsEntity() {}

type GenericScenarioResponse struct {
	Success  bool      `json:"success"`
	Message  string    `json:"message"`
	Scenario *Scenario `json:"scenario"`
}

type Scenario struct {
	ScenarioID            int                `json:"scenario_id"`
	Name                  *string            `json:"name"`
	User                  *User              `json:"user"`
	Forecast              *Forecast          `json:"forecast"`
	BranchID              *int               `json:"branch_id"`
	Comments              []*ScenarioComment `json:"comments"`
	Tags                  []*Tag             `json:"tags"`
	Queued                bool               `json:"queued"`
	RunScheduledTimestamp *string            `json:"run_scheduled_timestamp"`
	Status                ScenarioStatus     `json:"status"`
	CreatedAt             *string            `json:"created_at"`
}

func (Scenario) IsEntity() {}

type ScenarioComment struct {
	ScenarioCommentID int     `json:"scenario_comment_id"`
	Comment           *string `json:"comment"`
}

func (ScenarioComment) IsEntity() {}

type Tag struct {
	TagID int    `json:"tag_id"`
	Name  string `json:"name"`
}

func (Tag) IsEntity() {}

type User struct {
	UserID int `json:"user_id"`
}

func (User) IsEntity() {}

type ScenarioStatus string

const (
	ScenarioStatusCurrent     ScenarioStatus = "CURRENT"
	ScenarioStatusDeleted     ScenarioStatus = "DELETED"
	ScenarioStatusPromoted    ScenarioStatus = "PROMOTED"
	ScenarioStatusSupersceded ScenarioStatus = "SUPERSCEDED"
)

var AllScenarioStatus = []ScenarioStatus{
	ScenarioStatusCurrent,
	ScenarioStatusDeleted,
	ScenarioStatusPromoted,
	ScenarioStatusSupersceded,
}

func (e ScenarioStatus) IsValid() bool {
	switch e {
	case ScenarioStatusCurrent, ScenarioStatusDeleted, ScenarioStatusPromoted, ScenarioStatusSupersceded:
		return true
	}
	return false
}

func (e ScenarioStatus) String() string {
	return string(e)
}

func (e *ScenarioStatus) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ScenarioStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ScenarioStatus", str)
	}
	return nil
}

func (e ScenarioStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
